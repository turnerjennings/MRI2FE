name: Build Wheels

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude Python 3.9 on Windows due to compatibility issues
          - os: windows-latest
            python-version: "3.9"
          # Exclude Python 3.12 on older OS versions if needed
          - os: ubuntu-latest
            python-version: "3.12"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcgal-dev libeigen3-dev libgmp-dev libmpfr-dev catch2 autoconf automake libtool cmake

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cgal eigen gmp mpfr catch2

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Windows dependencies are handled via vcpkg in the build process
          echo "Windows dependencies will be installed via vcpkg"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools build

      - name: Install build dependencies
        run: |
          pip install numpy antspyx pybind11 matplotlib lasso-python scipy meshio

      - name: Install pybind11 for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install pybind11[global]
          python -c "import pybind11; print('pybind11 location:', pybind11.get_cmake_dir())"

      - name: Set up vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg install cgal eigen3 gmp mpfr catch2 boost --triplet=x64-windows
          echo "Checking vcpkg installed packages:"
          ./vcpkg list
          echo "Checking vcpkg directory structure:"
          dir
          if (Test-Path "installed") { 
            echo "installed directory exists:"
            dir installed
            if (Test-Path "installed\x64-windows") {
              echo "x64-windows directory exists:"
              dir installed\x64-windows
            }
          } else { 
            echo "installed directory does not exist" 
          }
          if (Test-Path "packages") { 
            echo "packages directory exists:"
            dir packages
          } else { 
            echo "packages directory does not exist" 
          }
          cd ..

      - name: Set environment variables (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" > vcpkg_env.txt
          echo "x64-windows" >> vcpkg_env.txt
          echo "OFF" >> vcpkg_env.txt
          echo "-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake;-DVCPKG_TARGET_TRIPLET=x64-windows" >> vcpkg_env.txt

      - name: Set environment variables (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          PYBIND11_CMAKE_DIR=$(python -c "import pybind11; print(pybind11.get_cmake_dir())")
          echo "CMAKE_ARGS=-DCMAKE_PREFIX_PATH=/usr/local:$PYBIND11_CMAKE_DIR" >> $GITHUB_ENV

      - name: Build wheel (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Reading Windows environment variables from file..."
          $lines = Get-Content "vcpkg_env.txt"
          $VCPKG_TOOLCHAIN_FILE = $lines[0]
          $VCPKG_TARGET_TRIPLET = $lines[1]
          $VCPKG_MANIFEST_MODE = $lines[2]
          $CMAKE_ARGS = $lines[3]

          # Set the environment variables that CMake needs
          $env:VCPKG_TOOLCHAIN_FILE = $VCPKG_TOOLCHAIN_FILE
          $env:VCPKG_TARGET_TRIPLET = $VCPKG_TARGET_TRIPLET
          $env:VCPKG_MANIFEST_MODE = $VCPKG_MANIFEST_MODE

          echo "Environment variables:"
          echo "VCPKG_TOOLCHAIN_FILE: $env:VCPKG_TOOLCHAIN_FILE"
          echo "CMAKE_ARGS: $CMAKE_ARGS"
          echo "VCPKG_MANIFEST_MODE: $env:VCPKG_MANIFEST_MODE"
          echo "VCPKG_TARGET_TRIPLET: $env:VCPKG_TARGET_TRIPLET"
          echo "Building wheel..."
          echo "Checking vcpkg installation:"
          if (Test-Path "vcpkg\installed\x64-windows\share\cgal") {
            echo "CGAL share directory exists:"
            dir vcpkg\installed\x64-windows\share\cgal
          } else {
            echo "CGAL share directory does not exist"
          }
          echo "Running CMake test:"
          cmake -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_TOOLCHAIN_FILE" -DVCPKG_TARGET_TRIPLET="$env:VCPKG_TARGET_TRIPLET" -DVCPKG_MANIFEST_MODE="$env:VCPKG_MANIFEST_MODE" -DVCPKG_MANIFEST_DIR="${{ github.workspace }}" -P "$env:VCPKG_TOOLCHAIN_FILE"
          python -m build --wheel --config-setting=cmake.args="$CMAKE_ARGS"

      - name: Build wheel (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        env:
          CMAKE_ARGS: ${{ env.CMAKE_ARGS }}
        run: |
          echo "Environment variables:"
          echo "CMAKE_ARGS: ${{ env.CMAKE_ARGS }}"
          echo "Building wheel..."
          python -m build --wheel --config-setting=cmake.args="${{ env.CMAKE_ARGS }}"

      - name: Build wheel (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          python -m build --wheel

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 30

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build source distribution
        run: |
          python -m build --sdist

      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 30

  release:
    needs: [build-wheels, build-sdist]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
