name: Build Wheels

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude Python 3.9 on Windows due to compatibility issues
          - os: windows-latest
            python-version: "3.9"
          # Exclude Python 3.12 on older OS versions if needed
          - os: ubuntu-latest
            python-version: "3.12"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcgal-dev libeigen3-dev libgmp-dev libmpfr-dev catch2 autoconf automake libtool

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cgal eigen gmp mpfr catch2

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Windows dependencies are handled via vcpkg in the build process
          echo "Windows dependencies will be installed via vcpkg"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools build

      - name: Install build dependencies
        run: |
          pip install numpy antspyx pybind11 matplotlib lasso-python scipy meshio

      - name: Set up vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg install cgal eigen3 gmp mpfr catch2
          cd ..

      - name: Set up vcpkg (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
          ./vcpkg install cgal eigen3 gmp mpfr catch2
          cd ..

      - name: Set environment variables (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "VCPKG_TOOLCHAIN=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "CMAKE_ARGS=-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_MANIFEST_MODE=ON -DVCPKG_MANIFEST_DIR=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Set environment variables (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "VCPKG_TOOLCHAIN=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
          echo "CMAKE_ARGS=-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_MANIFEST_MODE=ON -DVCPKG_MANIFEST_DIR=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Build wheel
        env:
          VCPKG_TOOLCHAIN: ${{ env.VCPKG_TOOLCHAIN }}
          CMAKE_ARGS: ${{ env.CMAKE_ARGS }}
        run: |
          python -m build --wheel

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 30

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build source distribution
        run: |
          python -m build --sdist

      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 30

  release:
    needs: [build-wheels, build-sdist]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
